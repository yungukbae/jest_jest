//mock function

const fn = require("./fn");

const mockFn = jest.fn();
// const mockFn = jest.fn(num => num + 1);

// mockFn();
// mockFn(1);

// test("함수는 두번 호출되었습니다.", () => {
//   //함수가 총 몇번 호출되었는가, 호출될때 전달된 인수는 무엇인가 알수있다.
//   //   console.log(mockFn.mock.calls);
//   expect(mockFn.mock.calls.length).toBe(2);
// });

// test("첫번째 인수는 1입니다.", () => expect(mockFn.mock.calls[1][0]).toBe(1));

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// const forEachAdd = (arr) => {
//   arr.map((v) => {
//     mockFn(v + 1);
//   });
// };

// forEachAdd([11, 22, 33]);

// test("mockFn은 3번 호출되었습니다", () => {
//   expect(mockFn.mock.calls.length).toBe(3);
// });

// test("mockFn의 값은 12,23,34입니다.", () => {
//   expect(mockFn.mock.calls[0][0]).toBe(12);
//   expect(mockFn.mock.calls[1][0]).toBe(23);
//   expect(mockFn.mock.calls[2][0]).toBe(34);
// });

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// mockFn
//   .mockReturnValueOnce(10)
//   .mockReturnValueOnce(20)
//   .mockReturnValueOnce(30)
//   .mockReturnValue(40);

// mockFn();
// mockFn();
// mockFn();
// mockFn();

// test("mock return value", () => {
//   console.log(mockFn.mock.results);
//   expect("dd").toBe("dd");
// });

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// mockFn
//   .mockReturnValueOnce(true)
//   .mockReturnValueOnce(false)
//   .mockReturnValueOnce(true)
//   .mockReturnValue(false);

// const result = [1, 2, 3, 4].filter((v) => mockFn(v));
// test("홀수번만 리턴!", () => {
//   expect(result).toStrictEqual([1, 3]);
// });

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//비동기 처럼 사용할 수 있다
// mockFn.mockResolvedValue({ name: "Mike" });
// test("name: Mike", () => {
//   mockFn().then((res) => {
//     expect(res.name).toBe("Mike");
//   });
// });

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//mock 함수에 fn을 넣어주어 fn을 mocking모듈로 만들어 테스트를 할 수 있다. 그럼 실제 함수는 동작하지 않지만 목킹 모듈을 통해 실제 함수와 똑같은 테스트를 할 수 있다.
// jest.mock("./fn");
// fn.createUser.mockReturnValue({ name: "Mike" });
// test("모킹 모듈을 활용한 테스트.", () => {
//   //fn의 함수인 creatUser의 console.log가 찍히지 않는걸 볼 수 있다.
//   const user = fn.createUser("Mike");
//   expect(user.name).toBe("Mike");
// });

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
mockFn(10, 20);
mockFn();
mockFn(30, 40);

test("한번이상 호출되었는가?", () => {
  expect(mockFn).toBeCalled();
});

test("정확히 세번 호출되었는가?", () => {
  expect(mockFn).toBeCalledTimes(3);
});

test("10이랑 20이라는 인수를 전달 받았는가?", () => {
  expect(mockFn).toBeCalledWith(10, 20);
});

test("마지막 목함수 호출시 30과 40이라는 인수를 전달 받았는가?", () => {
  expect(mockFn).lastCalledWith(30, 40);
});
